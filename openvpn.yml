# - name: test the private instance
#   hosts: private
#   become: true

#   tasks:
#   - name: curl google.com
#     uri: 
#       url: https://www.google.com
#     register: result 
#   - name: print result 
#     debug:
#       var: result 

- name: set client hostname as fact
  hosts: localhost
  gather_facts: false
  tasks:
  - name: get client instance hostname from terraform output 
    command: terraform output -json client_hostname
    register: hostname_client
  - set_fact:
      client_hostname: "{{ hostname_client.stdout | from_json | regex_replace('.ec2.internal$', '') }}"
  - debug:
      var: client_hostname
  - name: save the output as json in local
    copy:
      content: "{{ client_hostname }}"
      dest: "./client_hostname.json"


- name: configure the vpn host
  hosts: bastion_host
  become: true
# install package
  tasks:
  - name: update apt
    apt:
      update_cache: yes
    run_once: true
  - name: install openvpn and easyrsa
    apt:
      name:
      - openvpn
      - easy-rsa
      state: present
# get the hostname
  - name: get the hostname of the server 
    command: hostname 
    register: hostname_server 
  - name: print hostname
    debug:
      var: hostname_server

# create ca folder template
  - name: check if pki folder exist or not
    stat: 
      path: /etc/openvpn/easyrsa/pki
    register: pki
  - name: make-cadir
    command: make-cadir /etc/openvpn/easyrsa
    run_once: true
    ignore_errors: true
    when: pki.stat.exists == false 
# init pki
  - name: check if openssl-easyrsa.cnf exist or not
    stat: 
      path: /etc/openvpn/easyrsa/pki
    register: openssl_easyrsa_exist
  - name: easy-rsa init 
    command: ./easyrsa init-pki
    args:
      chdir: /etc/openvpn/easyrsa
    when: openssl_easyrsa_exist.stat.exists == false 
    run_once: true
# create ca.cert and ca.key
  - name: check if ca.key exist or not
    stat: 
      path: /etc/openvpn/easyrsa/pki/private/ca.key
    register: ca_key_exist
  - name: create ca crt and key
    expect:
      command: ./easyrsa build-ca nopass
      responses:
        "Common Name \\(eg: your user, host, or server name\\) \\[Easy-RSA CA\\]:": "server\n"
    args:
      chdir: /etc/openvpn/easyrsa
    when: ca_key_exist.stat.exists == false
    run_once: true
  # create dh.key
  - name: check if dh.pem exist or not
    stat: 
      path: /etc/openvpn/easyrsa/pki/dh.pem
    register: dh_key_exist
  - name: generate dh key 
    command:  ./easyrsa gen-dh
    args:
      chdir: /etc/openvpn/easyrsa
      creates: /etc/openvpn/easyrsa/pki/dh.pem
    when: dh_key_exist.stat.exists == false
    run_once: true
  # create server.key and request
  - name: check if server.key exist or not
    stat: 
      path: /etc/openvpn/easyrsa/pki/private/server.key
    register: server_key_exist
  - name: generate the server key and request
    shell: echo -e "{{ hostname_server.stdout }}" | ./easyrsa --req-cn={{ hostname_server.stdout }} gen-req server nopass
    args:
      chdir: /etc/openvpn/easyrsa
      creates:
      - /etc/openvpn/easyrsa/pki/private/server.key
      - /etc/openvpn/easyrsa/pki/reqs/server.req
    when: server_key_exist.stat.exists == false
    run_once: true
  # sign the server.crt
  - name: check if server.key exist or not
    stat: 
      path: /etc/openvpn/easyrsa/pki/issued/server.crt
    register: server_crt_exist
  - name: sign the server certificate 
    shell: echo  "yes" | ./easyrsa sign-req server server
    args:
      chdir: /etc/openvpn/easyrsa
      creates: /etc/openvpn/easyrsa/pki/issued/server.crt
    when: server_crt_exist.stat.exists == false
    run_once: true
  
  # create client.key and request
  - name: check if client.key exist or not
    stat: 
      path: /etc/openvpn/easyrsa/pki/private/client.key
    register: client_key_exist
  - name: delegate to get client hostname from localhost 
    setup:
    delegate_to: localhost
    register: localhost_facts
    become: false
  # - name: set client hostname fact fro localhost fact 
  #   set_fact:
  #     client_hostname: "{{ localhost_facts.ansible_facts.client_hostname }}"
  - name: print the client hostname
    debug:
      var: localhost_facts.ansible_facts.client_hostname
  - name: fetch the json file from local 
    copy:
      src: "./client_hostname.json"
      dest: "/tmp/"
  - name: read json file and extrac the value as variable 
    shell: cat /tmp/client_hostname.json
    register: client_hostname_raw
  - name: set the client_hostname variable
    set_fact:
      client_hostname: "{{ client_hostname_raw.stdout }}"

  - name: create the client key
    shell: 'echo  "{{ client_hostname }}" | ./easyrsa --req-cn={{ client_hostname }} gen-req client nopass'
    args:
      chdir: /etc/openvpn/easyrsa
      creates: 
      - /etc/openvpn/easyrsa/pki/private/client.key
      - /etc/openvpn/easyrsa/pki/reqs/client.req
    when: client_key_exist.stat.exists == false
    run_once: true
  # sign the client.crt
  - name: check if client.crt exist or not
    stat: 
      path: /etc/openvpn/easyrsa/pki/issued/client.crt
    register: client_crt_exist
  - name: sign the client certificate 
    shell: echo "yes" | ./easyrsa sign-req client client
    args:
      chdir: /etc/openvpn/easyrsa
      creates: /etc/openvpn/easyrsa/pki/issued/client.crt
    when: client_crt_exist.stat.exists == false
    run_once: true
  # cp pki/dh.pem pki/ca.crt pki/issued/server.crt pki/private/server.key /etc/openvpn/
  - name: check if ca.crt exist in openvpn folder or not
    stat: 
      path: /etc/openvpn/ca.crt
    register: ca_openvpn_exist
  - name: copy all the vpnserver required cert and keys 
    command: cp pki/dh.pem pki/ca.crt pki/issued/server.crt pki/private/server.key /etc/openvpn/
    args:
      chdir: /etc/openvpn/easyrsa
    when: ca_openvpn_exist.stat.exists == false
    run_once: true
  # download the files to tmp folder
  - name: download the client files to tmp folder
    fetch:
      src: "{{ item.src }}"
      dest: "./tmp/{{ item.dest }}"
      flat: yes 
    loop:
    - { src: "/etc/openvpn/easyrsa/pki/dh.pem", dest: "dh.pem" }
    - { src: "/etc/openvpn/easyrsa/pki/ca.crt", dest: "ca.crt" }
    - { src: "/etc/openvpn/easyrsa/pki/issued/client.crt", dest: "client.crt" }
    - { src: "/etc/openvpn/easyrsa/pki/private/client.key", dest: "client.key" }
  - name: get IP address
    shell: ip address show dev eth0 | grep "inet " | awk '{print $2}' | cut -d/ -f1
    register: server_ip 
  # - name: start the openvpn service
  #   systemd:
  #     name: openvpn@server 
  #     enabled: yes
  #     state: started




- name: configure the vpn client
  hosts: client
  become: true
  tasks:
  - name: update apt
    apt:
      update_cache: yes
    run_once: true
  - name: install openvpn 
    apt:
      name:
      - openvpn
      state: present
  # copy the client config sample file
  - name: check if client.config existence 
    stat: 
      path: /etc/openvpn/client.conf
    register: client_config_exist
  - name: cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf /etc/openvpn/
    command: cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf /etc/openvpn/
    when: client_config_exist.stat.exists == false
    run_once: true
  # check and copy the cert and keys
  - name: check if client.crt exist or not
    stat: 
      path: /etc/openvpn/client.crt
    register: client_client_exist
  - name: upload the cert and key to client 
    copy: 
      src: "./tmp/{{ item }}"
      dest: "/etc/openvpn/{{ item }}"
    loop:
    - client.crt
    - client.key
    - dh.pem
    - ca.crt
    when: client_client_exist.stat.exists == false
    run_once: true

  - name: Set permissions for OpenVPN client files
    become: true
    command: "chmod {{ item.mode }} /etc/openvpn/{{ item.file }}"
    loop:
      - { file: 'client.conf', mode: '644' }
      - { file: 'client.crt', mode: '644' }
      - { file: 'client.key', mode: '600' }
      - { file: 'dh.pem', mode: '600' }
      - { file: 'ca.crt', mode: '644' }
    when: client_client_exist.stat.exists == false
    run_once: true
  # no need to edit the config file, because the file name are the same with the template, only to update the ip address of server
  - name: update the server IP address
    replace:
      path: /etc/openvpn/client.conf  
      regexp: 'my-server-1'
      replace: '{{ hostvars["bastion_host"]["server_ip"]["stdout"] }}'
    ignore_errors: yes
  # update the ciper
  - name: update the cipher-1
    lineinfile:
      path: /etc/openvpn/client.conf  
      regexp: 'cipher AES-256-CBC'
      line: 'cipher AES-256-GCM' 
    ignore_errors: yes
    tags: update_config
  - name: update the cipher-2
    lineinfile:
      path: /etc/openvpn/client.conf  
      insertafter: '^cipher AES-256-GCM'
      line: 'data-ciphers AES-256-GCM:AES-128-GCM'
    ignore_errors: yes
    tags: update_config
  - name: check ta.key existence
    stat:
      path: /etc/openvpn/ta.key 
    register: ta_exists
  - name: create ta.key
    command: openvpn --genkey secret /etc/openvpn/ta.key
    when: ta_exists.stat.exists == false
    run_once: true 
  # start openvpn service
  - name: start the openvpn service
    systemd:
      name: openvpn@client 
      enabled: yes
      state: started

   